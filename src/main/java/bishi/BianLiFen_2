package cn.bishi;

import java.util.Scanner;

public class bianlifen_2 {


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        Mapp map = new Mapp();
        while (t-- > 0) {
            String op = sc.next();
            if (op.charAt(0) == '>') {
                String[] ops = op.split(",");
                String key = ops[0].substring(1);
                String value = ops[1];
                map.put(key, value);
            } else if (op.charAt(0) == '<') {
                String key = op.substring(1);
                System.out.println(map.get(key));
            } else if (op.charAt(0) == 'X') {
                String key = op.substring(1);
                map.remove(key);
            }

        }
    }
}


class Mapp {
    public int key;
    public String value;
    public String[][][] enty;

    public Mapp() {
        this.enty = new String[1005][1005][2];
    }

    public void put(String key, String value) {
        int hash = key.hashCode() % 1005;

        if (enty[hash][0][0] == null) {
            enty[hash][0][0] = key;
            enty[hash][0][1] = value;
        } else {
            int k = 0;
            while (enty[hash][k][0] == null){
                if(enty[hash][k][0].equals(key)) {
                    enty[hash][k][0] = key;
                    enty[hash][k][1] = value;
                }
                k++;
            }
            enty[hash][k][0] = key;
            enty[hash][k][1] = value;
        }
    }

    public String get(String key) {
        int hash = key.hashCode() % 1005;
        if (enty[hash][0][0] == null) return "_EMPTY_";
        else {
            int k = 0;
            while (!enty[hash][k][0].equals(key)) k++;
            return enty[hash][k][1];
        }
    }

    public void remove(String key) {
        int hash = key.hashCode() % 1005;
        int index = 0;
        for (int i = 0; i < 1005; i++) {
            if (enty[hash][i][0].equals(key)) {
                index = i;
                break;
            }
        }
        for (int i = index; i < 1004; i++) {
            enty[hash][i][0] = enty[hash][i + 1][0];
            enty[hash][i][1] = enty[hash][i + 1][1];
        }
    }

}

